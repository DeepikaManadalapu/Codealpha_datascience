# ====== SALES PREDICTION USING PYTHON (CodeAlpha Task 4) ======

# --- Step 1: Import Required Libraries ---
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

print("âœ… Libraries Imported Successfully")

# --- Step 2: Upload Dataset ---
# Dataset link (from CodeAlpha): https://www.kaggle.com/datasets/bumba5341/advertisingcsv
# Download the CSV from Kaggle, then upload it to Colab when prompted.

from google.colab import files
uploaded = files.upload()

# --- Step 3: Load Dataset ---
df = pd.read_csv("Advertising.csv")
print("\nâœ… Dataset Loaded Successfully")
print(df.head())

# --- Step 4: Explore Data ---
print("\nDataset Information:")
print(df.info())
print("\nMissing Values:\n", df.isnull().sum())
print("\nStatistical Summary:\n", df.describe())

# --- Step 5: Data Visualization ---
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

plt.figure(figsize=(8,5))
sns.pairplot(df)
plt.show()

# --- Step 6: Define Features (X) and Target (y) ---
# Usually, the dataset has columns like 'TV', 'Radio', 'Newspaper', and 'Sales'
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

# --- Step 7: Split Dataset ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("\nâœ… Data Split Completed")
print("Training Data:", X_train.shape)
print("Testing Data:", X_test.shape)

# --- Step 8: Train Linear Regression Model ---
model = LinearRegression()
model.fit(X_train, y_train)
print("\nâœ… Model Trained Successfully")

# --- Step 9: Make Predictions ---
y_pred = model.predict(X_test)

# --- Step 10: Evaluate Model ---
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("\nðŸ“Š Model Evaluation Metrics:")
print(f"RÂ² Score: {r2:.4f}")
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")

# --- Step 11: Visualization - Actual vs Predicted Sales ---
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.grid(True)
plt.show()

# --- Step 12: Residual Plot ---
residuals = y_test - y_pred
plt.figure(figsize=(8,6))
plt.scatter(y_pred, residuals, color='green', alpha=0.6)
plt.axhline(0, color='red', linestyle='--')
plt.xlabel("Predicted Sales")
plt.ylabel("Residuals")
plt.title("Residuals vs Predicted Sales")
plt.grid(True)
plt.show()

# --- Step 13: Save Model (Optional) ---
import joblib
joblib.dump(model, 'sales_prediction_model.pkl')
print("\nðŸ’¾ Model Saved as 'sales_prediction_model.pkl'")

print("\nðŸŽ¯ Sales Prediction Project Completed Successfully!")
